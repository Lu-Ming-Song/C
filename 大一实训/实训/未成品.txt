#include <graphics.h>      // 就是需要引用这个图形库
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <windows.h>
#include <Winuser.h>
#include <time.h>
#pragma comment(lib,"winmm.lib")
#define MAX 20
MOUSEMSG M;	
int map[9][11];
IMAGE  dboxImg, endImg, peoImg, wallImg,blankImg, boxImg;
clock_t final = 0;   //计时器的一个数值 
#define MOUSE_POS_ELSE 99  //
#define MOUSE_POS_AREA 1    //
#define MOUSE_POS_START 100    //
#define MOUSE_POS_REGRET 200   //
//播放音乐
void music()
{
    PlaySound("C:\\Users\\aming\\信乐团+-+假如.wav",NULL,SND_FILENAME|SND_ASYNC|SND_LOOP);//LOOP循环   ASYNC可以一边执行一边播放
}
//绘制地图  //二维数组+switch()
void Gameinit()
{
	initgraph(680,680);//初始化一个图形界面
	settextcolor(BLUE);//字体颜色
	settextstyle(30,30,"华文彩云");//大小形状
	
	outtextxy(200,100,"第一关");//指定坐标输出文本信息
	outtextxy(200,200,"第二关");//指定坐标输出文本信息
	outtextxy(200,300,"第三关");//指定坐标输出文本信息
	outtextxy(200,400,"第四关");//指定坐标输出文本信息
	outtextxy(200,500,"第五关");//指定坐标输出文本信息

  loadimage(&blankImg,"C:\\Users\\aming\\1.jpg",80,80);//加载空格图片
  loadimage(&wallImg,"C:\\Users\\aming\\2.jpg",80,80);//加载墙图片
  loadimage(&endImg,"C:\\Users\\aming\\4.jpg",80,80);//加载目的地图片
  loadimage(&boxImg,"C:\\Users\\aming\\5.jpg",80,80);//加载箱子图片
  loadimage(&peoImg,"C:\\Users\\aming\\6.jpg",80,80);//加载人图片
  loadimage(&dboxImg,"C:\\Users\\aming\\3.jpg",80,80);//加载箱子到达目的地图片


}
void DrawMap()
{
	int i,j;
    //遍历二维数组  //0 打印空格  //1 墙   //3 目的地   //4代表箱子   //5代表人   //7代表箱子推入目的地    // 8人在目的地中
    for ( i = 0; i < 9; i++)
    {
        for ( j = 0; j < 11; j++)
        {
            
            switch (map[i][j])
            {
            case 0:
                putimage(i * 60, j * 60, &blankImg);
                break;
            case 1:
                putimage(i * 60, j * 60, &wallImg);
                break;
            case 3:
               putimage(i * 60, j * 60, &endImg);
                break;
            case 4:
                putimage(i * 60, j * 60, &boxImg);
                break;
            case 5:
                putimage(i * 60, j * 60, &peoImg);  //5人
                break;
            case 7:     //4 + 3  箱子在目的地中
                putimage(i * 60, j * 60, &dboxImg);
                break;
            case 8:     // 5 + 3  人在目的地当中的人
                putimage(i * 60, j * 60, &peoImg);
                break;
            }
        }
        printf("\n");
    }
}


int PlayGame()
{
	 char ch;  //字符变量
	 char s[5]; //时间
    int r, c, i , j;  //人的下标  //
	int k = 0;  //是否重新开始游戏
	clock_t time = 120, start;
	start = clock()/CLOCKS_PER_SEC;
    for ( i = 0; i < 9; i++)
    {
        for ( j = 0; j < 11; j++)
        {
            if (map[i][j] == 5||map[i][j]==8)   //i j 人的下标
            {
                r = i;
                c = j;
            }
        }
    }

	settextcolor(BLUE);//字体颜色
	settextstyle(25,25,"华文彩云");//大小形状
	outtextxy(10,10,"重选关按Y");
	sprintf(s,"%d",(int)(start - final));//将整形start - final转换成字符串
	settextcolor(RED);//字体颜色
	settextstyle(30,30,"华文彩云");//大小形状
	outtextxy(0,650,s);
	
	printf("Elapsed time:%u secs.\n",start - final);  //流逝的时间


	if((start - final) >= time)
    {
		initgraph(680,680);//初始化一个图形界面
		settextcolor(BLUE);//字体颜色
	    settextstyle(25,25,"华文彩云");//大小形状
	    outtextxy(100,300,"重选关卡按Y(y)");
        outtextxy(100,100,"闯关失败!!!");
		settextcolor(BLUE);//字体颜色
		outtextxy(100,500,"退出游戏请按(Exc)");
		

    }
    ch = getch();  //键盘的输入保存到字符中


    switch (ch) //人运动的方向
    {
    case 'W':
    case 'w':
	case 72:
         if (map[r ][c - 1] == 0 || map[r ][c - 1] == 3)
        {
            map[r ][c - 1] += 5;
            map[r][c] -= 5;
        }
        else if (map[r][c - 1] == 4 || map[r][c - 1] == 7)
        {
            if (map[r ][c - 2] == 0 || map[r ][c - 2] == 3)
            {
                map[r ][c - 2] += 4;
                map[r ][c - 1] += 1;
                map[r][c] -= 5;
            }
        }



        break;

    case 'S':
    case 's':
	case 80:

		  if (map[r][c + 1] == 0 || map[r][c + 1] == 3)
        {
            map[r][c + 1] += 5;
            map[r][c] -= 5;
        }
        else if (map[r][c + 1] == 4 || map[r][c + 1] == 7)
        {
            if (map[r][c + 2] == 0 || map[r][c + 2] == 3)
            {
                map[r][c + 2] += 4;
                map[r][c + 1] += 1;
                map[r][c] -= 5;
            }
        }
     
        break;

    case 'A':
    case 'a':
	case 75:
		   if (map[r - 1][c] == 0|| map[r - 1][c] == 3) //人的位置，之前位置成为通道
        {
            map[r - 1][c] += 5;
            map[r][c] -= 5;
        }
        else if (map[r - 1][c] == 4 || map[r - 1][c] == 7)
        {
            if (map[r - 2][c] == 0 || map[r - 2][c] == 3)
            {
                map[r - 2][c] += 4;
                map[r - 1][c] += 1;
                map[r][c] -= 5;
            }
        }
    
        break;

    case 'D':
    case 'd':
	case 77:

      
		if (map[r + 1][c] == 0 || map[r + 1][c] == 3)
        {
            map[r + 1][c] += 5;
            map[r][c] -= 5;
        }
        else if (map[r + 1][c] == 4 || map[r+ 1][c] == 7)
        {
            if (map[r + 2][c] == 0 || map[r + 2][c] == 3)
            {
                map[r + 2][c] += 4;
                map[r + 1][c] += 1;
                map[r][c] -= 5;
            }
        }
        break;

	case 'R':
	case 'r':
	case ' ':
		final = start;
		k = 1;break;
    case 27:
        k = 4;break;
    case 'y': 
		Gameinit();
		final = start;
		k = 2;break;
    }
	
    if(k == 2 || k == 3)//k = 2重新选择关卡 k = 3超时
    {
        return 1;
    }
	if(k == 1)
	{
		return 3;
	}
	if(k == 4)
    {

        return 4;
    }
	return 2;


}
//
void one()
{
		int mp[9][11] = {
    {6,1,1,1,1,1,1,1,1,1,6},  //0代表空地
    {6,1,0,0,0,1,0,0,0,1,6},  //1代表墙
    {6,1,0,0,4,0,0,0,0,1,6},  //3代表目的地
    {6,1,0,0,0,0,0,0,0,1,1},  //4代表箱子
    {6,1,0,0,0,0,0,0,0,0,1},  //5代表人
    {1,1,0,1,1,1,1,0,0,0,1},
    {1,0,8,0,0,0,0,1,0,0,1},  //7代表箱子推入目的地
    {1,0,0,0,0,0,0,0,0,1,1},  // 8人在目的地中
    {1,1,1,1,1,1,1,1,1,1,6} };
	int i,j;

	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			map[i][j] = mp[i][j];
		}
	}
}
void two()
{
		int i,j;
	int mp[9][11] = {
    {6,1,1,1,1,1,1,1,1,1,6},  //0代表空地
    {6,1,0,0,0,1,0,0,0,1,6},  //1代表墙
    {6,1,0,0,4,0,0,0,0,1,6},  //3代表目的地
    {6,1,0,4,0,4,0,0,0,1,1},  //4代表箱子
    {6,1,0,0,0,0,0,0,0,0,1},  //5代表人
    {1,1,0,1,1,1,1,0,0,0,1},
    {1,0,8,0,0,0,0,1,0,0,1},  //7代表箱子推入目的地
    {1,0,0,3,0,3,0,0,0,1,1},  // 8人在目的地中
    {1,1,1,1,1,1,1,1,1,1,6} };
	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			map[i][j] = mp[i][j];
		}
	}
}
void three()
{
		int i,j;
	int mp[9][11] = {
    {6,1,1,1,1,1,1,1,1,1,6},  //0代表空地
    {6,1,0,0,0,1,0,0,0,1,6},  //1代表墙
    {6,1,0,0,4,0,4,0,0,1,6},  //3代表目的地
    {6,1,0,4,0,4,0,0,0,1,1},  //4代表箱子
    {6,1,0,0,0,0,0,0,4,0,1},  //5代表人
    {1,1,0,1,1,1,1,0,0,0,1},
    {1,0,8,3,3,0,0,1,0,0,1},  //7代表箱子推入目的地
    {1,0,3,3,0,0,0,0,0,1,1},  // 8人在目的地中
    {1,1,1,1,1,1,1,1,1,1,6} };
	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			map[i][j] = mp[i][j];
		}
	}
}
void four()
{
		int i,j;
	int mp[9][11] = {
    {6,1,1,1,1,1,1,1,1,1,6},  //0代表空地
    {6,1,0,0,0,1,0,0,0,1,6},  //1代表墙
    {6,1,0,4,0,4,0,4,0,1,6},  //3代表目的地
    {6,1,0,4,0,4,0,4,0,1,1},  //4代表箱子
    {6,1,0,0,0,0,0,0,4,0,1},  //5代表人
    {1,1,0,1,1,1,1,0,4,0,1},
    {1,0,8,3,0,3,0,1,0,0,1},  //7代表箱子推入目的地
    {1,0,3,3,3,3,3,0,0,1,1},  // 8人在目的地中
    {1,1,1,1,1,1,1,1,1,1,6} };
	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			map[i][j] = mp[i][j];
		}
	}
}
void five()
{
	int i,j;
	int mp[9][11] = {
    {6,1,1,1,1,1,1,1,1,1,6},  //0代表空地
    {6,1,0,0,0,1,0,0,0,1,6},  //1代表墙
    {6,1,0,4,4,4,4,4,0,1,6},  //3代表目的地
    {6,1,0,4,0,4,0,4,0,1,1},  //4代表箱子
    {6,1,0,0,0,0,0,0,4,0,1},  //5代表人
    {1,1,0,1,1,1,1,0,4,0,1},
    {1,0,8,3,3,3,3,1,0,0,1},  //7代表箱子推入目的地
    {1,0,3,3,3,3,3,0,0,1,1},  // 8人在目的地中
    {1,1,1,1,1,1,1,1,1,1,6} };
	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			map[i][j] = mp[i][j];
		}
	}
}
int successful()
{
	int i, j, d = 0;
	//d判断地图是否存在
	for(i=0;i<9;i++)
	{
		for(j=0;j<11;j++)
		{
			if(map[i][j] == 3 || map[i][j] == 8 || map[i][j] == 4)
			{
				return 0;
			}
			if(map[i][j] == 1)
			{
				d = 1;
			}

		}
	}
	printf("\a");
	if(d == 1)
	{
		initgraph(680,680);//初始化一个图形界面
	    settextcolor(RED);//字体颜色
     	settextstyle(30,30,"华文彩云");//大小形状
		outtextxy(30,300,"恭喜您闯关成功 !!!");
		outtextxy(30,100,"重选关卡按Y(y)");
		settextcolor(BLUE);//字体颜色
		outtextxy(30,500,"退出游戏请按(Exc)");
	}

	if(d == 0)
	{
		return 7;
	}
	return 6;
}


char Mshit()
{
	char c;
	char x[5],y[5];
	int i =  0;
	M = GetMouseMsg();
	while(i == 0)
	{
	switch (M.uMsg)
	{
	case WM_MOUSEMOVE:
			putpixel(M.x,M.y,RED);
			break;
	case WM_LBUTTONDOWN:
		if(M.x >= 200  && M.x <=290 && M.y  >= 100 && M.y < 190)
		{
	    settextcolor(RED);
	 	outtextxy(200,100,"第一关");//指定坐标输出文本信息
		c = '1';

		}
    	else if(M.x  >= 200 && M.x <=290 && M.y  >= 200 && M.y <= 290)
		{
		settextcolor(RED);
		outtextxy(200,200,"第二关");//指定坐标输出文本信息
		c = '2';

		}
    	else if(M.x >= 200 && M.x <=290 && M.y  >= 300 && M.y  <= 390)
		{
		 settextcolor(RED);
		outtextxy(200,300,"第三关");//指定坐标输出文本信息
		c = '3';
		}
	   else if(M.x >= 200 && M.x <=290 && M.y >= 400 && M.y <= 490)
	   {
		 settextcolor(RED);
		outtextxy(200,400,"第四关");//指定坐标输出文本信息
		c = '4';
	   }
    	else if(M.x >= 200 && M.x <=290 && M.y >= 500 && M.y <= 590)
		{
		 settextcolor(RED);
		outtextxy(200,500,"第五关");//指定坐标输出文本信息*/
		c = '5';
		}
		i = 1;
		break;
	}
	}

	
		return c;
}


		
		

	

int main()  //主函数
{
	char c;
	int k = 1 ,S = 0;

	music();	
    Gameinit();
	// k = 0已调好关卡，k = 1选择关卡, k = 4退出游戏，k = 3 重新开局
	// S = 0还未闯关成功 S = 6闯关成功 S = 7退出游戏
    while (1)
    {
	//int86(0x33,&pos,&pos) //获得当前鼠标位置 
		
        system("cls");
		c = Mshit();	
       while(k == 1 || S == 6)
        {
  
		if(c == '1')
		{
			one();k = 0;S = 0;
		}
		else if(c == '2')
		{
			two();k = 0;S = 0;
		}
		else if(c == '3')
		{
			three();k = 0;S = 0;
		}
		else if(c == '4')
		{
			four();k = 0;S = 0;
		}
		else if(c == '5')
		{
			five();k = 0;S = 0;
		}
		else if(c == 27)
        {
            k = 4; S = 0;
        }
		else
		{
			printf("\n选择关卡错误，请重新选择！\n");
			continue;
		}
        }

		if(k != 4)
		{
       DrawMap();
       k = PlayGame();
	   S = successful();
		}
	   if(k == 3) //重新开局
       {
           if(c == '1')
		{
			one();k = 0;S = 0;
		}
		else if(c == '2')
		{
			two();k = 0;S = 0;
		}
		else if(c == '3')
		{
			three();k = 0;S = 0;
		}
		else if(c == '4')
		{
			four();k = 0;S = 0;
		}
		else if(c == '5')
		{
			five();k = 0;S = 0;
		}

       }
       if(k == 4 || S == 7)
       {
           printf("退出游戏成功!\n");
           break;
       }
	  //FlushMouseMsgBuffer();//清空鼠标信息
    }
    return 0;
}


#include <stdio.h>
#include <malloc.h>
#define MAX 20
struct binode
{
	char data;
	struct binode *rchild,*lchild;
};
struct stack
{
	struct binode *sdata[MAX];
	int top;
}s;
void initstack()
{
	s.top=-1;
}
int pushstack(struct binode *p)
{
	if(s.top==MAX-1) return 0;
	s.top++;
	s.sdata[s.top]=p;
	return 1;
}
int popstack(struct binode **p)
{
	if(s.top==-1) return 0;
	*p=s.sdata[s.top];
	s.top--;
	return 1;
}
struct binode *create()
{
	struct binode *t;
	char ch;
	scanf("%c",&ch);
	if(ch=='*') t=NULL;
	else
    {
        t=(struct binode *)malloc(sizeof(struct binode));
        t->data=ch;
        t->lchild=create();
        t->rchild=create();
    }
    return t;
}
void preorder(struct binode *t)//前序遍历
{
    initstack();
    while(s.top!=-1||t!=NULL)
    {
        while(t!=NULL)
        {
            printf("%c ",t->data);
            pushstack(t);
            t=t->lchild;
        }
        if(s.top!=-1)
        {
            popstack(&t);
            t=t->rchild;
        }
    }
}
void inorder(struct binode *t)//中序遍历
{
    initstack();
    while(s.top!=-1||t!=NULL)
    {
        while(t!=NULL)
        {
        pushstack(t);
        t=t->lchild;
        }
    if(s.top!=-1)
    {
        popstack(&t);
        printf("%c ",t->data);
        t=t->rchild;
    }
    }
}
void postorder(struct binode *t)//后序遍历
{
    initstack();
    struct binode *p=NULL;
    while(t!=NULL||s.top!=-1)
    {
        while(t!=NULL)
        {
            pushstack(t);
            t=t->lchild;
        }
        t=s.sdata[s.top];
        if(t->rchild==NULL||t->rchild==p)
        {
            printf("%c ",t->data);
            p=t;
            popstack(&t);
            t=NULL;
        }
        else
        {
            t=t->rchild;
        }
    }
}
void main()
{
	struct binode *BT;
	BT=create();
	printf("先序遍历：\n");
	preorder(BT);
	printf("\n中序遍历：\n");
	inorder(BT);
	printf("\n后序遍历：\n");
	postorder(BT);
}
